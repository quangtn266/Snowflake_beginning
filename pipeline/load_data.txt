// create table first
CREATE OR REPLACE TABLE OUR_FIRST_DB.PUBLIC.movie_titles(
    show_id STRING,
    type STRING,
    title STRING,
    director STRING,
    cast STRING,
    country STRING,
    date_added STRING,
    release_year STRING,
    rating STRING,
    duration STRING,
    listed_in STRING,
    description STRING
)

// create file format object
CREATE OR REPLACE file format MANAGE_DB.PUBLIC.csv_fileformat
    type = csv
    field_delimiter= ','
    skip_header = 1
    null_if = ('NULL', 'null')
    empty_field_as_null = TRUE;

// Crete stage object with integration object & file format object
CREATE OR REPLACE stage MANAGE_DB.EXTERNAL_STAGES.csv_folder
    URL = 's3://<bucket>/path'
    STORAGE_INTEGRATION = s3_int
    FILE_FORMAT = MANAGE_DB.PUBLIC.csv_fileformat

// use Copy command
COPY INTO OUR_FIRST_DB.PUBLIC.movie_titles
    FROM @MANAGE_DB.external_stages.csv_folder

// create file format object
CREATE OR REPLACE file format MANAGE_DB.PUBLIC.csv_fileformat
type = csv
field_delimiter = ','
null_if = ('NULL', 'null')
empty_field_as_null = TRUE
FIELD_OPTIONALLY_ENCLOSED_BY = '"'

SELECT * FROM OUR_FIRST_DB.PUBLIC.MOVIE_TITLES

//////////////////////////////////////////////////////

// Create file format
CREATE OR REPLACE file format MANAGE_DB.PUBLIC.json_fileformat
    type =JSON

// create stage object integration object & file format object
CREATE OR REPLACE stage MANAGE_DB.external_stages.json_folder
    URL = "s3://snowflakes3bucketquangtn260693/json/"
    STORAGE_INTEGRATION = s3_int
    FILE_FORMAT = MANAGE_DB.PUBLIC.json_fileformat
    
// let's tame the JSON file

// first query from s3 bucket

SELECT * FROM @MANAGE_DB.external_stages.json_folder

// Introduce columns
SELECT
$1: asin,
$1: helpful,
$1: overall,
$1: reviewText,
$1: reviewTime,
$1: reviewerID,
$1: reviewName,
$1: summary,
$1: unixReviewTime
FROM @MANAGE_DB.external_stages.json_folder


// Format columns & user DATE Function
SELECT
$1: asin::STRING as ASIN,
$1: helpful as helpful,
$1: overall as overall,
$1: reviewText::STRING as reviewText,
$1: reviewTime::STRING,
$1: reviewerID::STRING,
$1: reviewName::STRING,
$1: summary::STRING,
DATE($1: unixReviewTime::int) as Reviewtime
FROM @MANAGE_DB.external_stages.json_folder


// Format columns & handle custom date.
SELECT
$1: asin::STRING as ASIN,
$1: helpful as helpful,
$1: overall as overall,
$1: reviewText::STRING as reviewText,
DATE_FROM_PARTS(<year>, <month>, <day>)
$1: reviewTime::STRING,
$1: reviewerID::STRING,
$1: reviewName::STRING,
$1: summary::STRING,
DATE($1: unixReviewTime::int) as Reviewtime
FROM @MANAGE_DB.external_stages.json_folder


SELECT
$1: asin::STRING as ASIN,
$1: helpful as helpful,
$1: overall as overall,
$1: reviewText::STRING as reviewText,
DATE_FROM_PARTS(RIGHT($1:reviewTime::STRING,4), LEFT($1:reviewTime::STRING,2), SUBSTRING($1:reviewTime::STRING,4,2)),
$1: reviewTime::STRING,
$1: reviewerID::STRING,
$1: reviewName::STRING,
$1: summary::STRING,
DATE($1: unixReviewTime::int) as Reviewtime
FROM @MANAGE_DB.external_stages.json_folder


// use date_from_parts and handle the case difficulty
SELECT
$1: asin::STRING as ASIN,
$1: helpful as helpful,
$1: overall as overall,
$1: reviewText::STRING as reviewText,
DATE_FROM_PARTS(
    RIGHT($1:reviewTime::STRING,4),
    LEFT($1:reviewTime::STRING,2),
    CASE WHEN SUBSTRING($1:reviewTime::STRING,5,1)=','
            THEN SUBSTRING($1:reviewTime::STRING,4,1) ELSE SUBSTRING($1:reviewTime::STRING,4,2) END),
$1: reviewTime::STRING,
$1: reviewerID::STRING,
$1: reviewName::STRING,
$1: summary::STRING,
DATE($1: unixReviewTime::int) as Reviewtime
FROM @MANAGE_DB.external_stages.json_folder

// CREate destination table
CREATE OR REPLACE TABLE OUR_FIRST_DB.PUBLIC.reviews (
asin STRING,
helpful STRING,
overall STRING,
reviewtext STRING,
reivewtime DATE,
reviewerid STRING,
reviewername STRING,
summary STRING
)

// COpy transformed data into destination table.
COPY INTO OUR_FIRST_DB.PUBLIC.REVIEWS
FROM (SELECT 
$1:asin::STRING as ASIN,
$1:helpful as helpful,
$1:overall as overall,
$1:reviewText::STRING as reviewtext,
DATE_FROM_PARTS( 
  RIGHT($1:reviewTime::STRING,4), 
  LEFT($1:reviewTime::STRING,2), 
  CASE WHEN SUBSTRING($1:reviewTime::STRING,5,1)=',' 
        THEN SUBSTRING($1:reviewTime::STRING,4,1) ELSE SUBSTRING($1:reviewTime::STRING,4,2) END),
$1:reviewerID::STRING,
$1:reviewerName::STRING,
$1:summary::STRING
FROM @MANAGE_DB.external_stages.json_folder)

// validate results
SELECT * FROM OUR_FIRST_DB.PUBLIC.reviews